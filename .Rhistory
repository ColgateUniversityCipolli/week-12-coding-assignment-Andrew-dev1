}
beta.moment(2,3,4,T)
beta.moment <- function(alpha, beta, k, centered){
if(centered){
mean <- alpha/ (alpha-beta)
moment <- function(x) {
(x-mean)^n * dbeta(x, shape1 = alpha, shape2 = beta)
return(integrate(moment, lower = 0, upper = 1)$value)
}
}else{
moment <- function(x) {
x^n * dbeta(x, shape1 = alpha, shape2 = beta)
}
}
return(integrate(moment, lower = 0, upper = 1)$value)
}
beta.moment(2,3,4,T)
(x-mean)^n * dbeta(x, shape1 = alpha, shape2 = beta)
beta.moment <- function(alpha, beta, k, centered){
if(centered){
mean <- alpha/ (alpha-beta)
moment <- function(x) {
(x-mean)^n * dbeta(x, shape1 = alpha, shape2 = beta)
return(integrate(moment, lower = 0, upper = 1))
}
}else{
moment <- function(x) {
x^n * dbeta(x, shape1 = alpha, shape2 = beta)
}
}
return(integrate(moment, lower = 0, upper = 1)$value)
}
beta.moment(2,3,4,T)
return(integrate(moment, lower = 0, upper = 1)$value)
beta.moment <- function(alpha, beta, k, centered){
if(centered){
mean <- alpha/ (alpha-beta)
moment <- function(x) {
(x-mean)^n * dbeta(x, shape1 = alpha, shape2 = beta)
}
return(integrate(moment, lower = 0, upper = 1)$value)
}else{
moment <- function(x) {
x^n * dbeta(x, shape1 = alpha, shape2 = beta)
}
}
return(integrate(moment, lower = 0, upper = 1)$value)
}
beta.moment(2,3,4,T)
# Task three
set.seed(7272)
beta.moment(2,3,4,F)
# Task Two, moment function was created to bypass the unknown x variable
beta.moment <- function(alpha, beta, k, centered){
moment <- function(x) {
x^n * dbeta(x, shape1 = alpha, shape2 = beta)
}
if(centered){
mean <- moment()
center.moment <- function(x) {
(x-mean)^n * dbeta(x, shape1 = alpha, shape2 = beta)
}
}else{
}
return(integrate(moment, lower = 0, upper = 1)$value)
}
beta.moment(2,3,4,T)
# Task Two, moment function was created to bypass the unknown x variable
beta.moment <- function(alpha, beta, k, centered){
moment <- function(x) {
x^n * dbeta(x, shape1 = alpha, shape2 = beta)
}
if(centered){
center.moment <- function(x) {
(x-moment)^n * dbeta(x, shape1 = alpha, shape2 = beta)
}
}else{
}
return(integrate(moment, lower = 0, upper = 1)$value)
}
beta.moment(2,3,4,T)
beta.moment(2,3,4,F)
# Task Two, moment function was created to bypass the unknown x variable
beta.moment <- function(alpha, beta, k, centered){
moment <- function(x) {
x^n * dbeta(x, shape1 = alpha, shape2 = beta)
}
if(centered){
center.moment <- function(x) {
(x-moment)^n * dbeta(x, shape1 = alpha, shape2 = beta)
}
return(integrate(center.moment, lower = 0, upper = 1)$value)
}
return(integrate(moment, lower = 0, upper = 1)$value)
}
beta.moment(2,3,4,T)
# Task Two, moment function was created to bypass the unknown x variable
beta.moment <- function(alpha, beta, k, centered){
moment <- function(x) {
x^n * dbeta(x, shape1 = alpha, shape2 = beta)
}
value <- integrate(moment, lower = 0, upper = 1)$value
if(centered){
center.moment <- function(x) {
(x-value)^n * dbeta(x, shape1 = alpha, shape2 = beta)
}
return(integrate(center.moment, lower = 0, upper = 1)$value)
}
return(value)
}
beta.moment(2,3,4,T)
sample.nums <- tibble(x = seq(0, 1.0, length.out=500))
ggplot(data= figure1.data)+                                            # specify data
geom_line(aes(x=x, y=beta.2.5, color="Beta(2,5)")) +                 # plot beta dist
geom_line(aes(x=x, y=beta.5.5, color="Beta(5,5)")) +
geom_line(aes(x=x, y=beta.5.2, color="Beta(5,2)")) +
geom_line(aes(x=x, y=beta.half, color="Beta(0.5,0.5)")) +
geom_hline(yintercept=0)+                                            # plot x axis
theme_bw()+                                                          # change theme
xlab("x")+                                                           # label x axis
ylab("Density")+                                                     # label y axis
scale_color_manual("", values = c("black", "lightblue", "purple",
"orange"))+                 # change colors
theme(legend.position = "bottom")
beta.distributions <- ggplot(data= figure1.data)+                                            # specify data
geom_line(aes(x=x, y=beta.2.5, color="Beta(2,5)")) +                 # plot beta dist
geom_line(aes(x=x, y=beta.5.5, color="Beta(5,5)")) +
geom_line(aes(x=x, y=beta.5.2, color="Beta(5,2)")) +
geom_line(aes(x=x, y=beta.half, color="Beta(0.5,0.5)")) +
geom_hline(yintercept=0)+                                            # plot x axis
theme_bw()+                                                          # change theme
xlab("x")+                                                           # label x axis
ylab("Density")+                                                     # label y axis
scale_color_manual("", values = c("black", "lightblue", "purple",
"orange"))+                 # change colors
theme(legend.position = "bottom")
View(beta.distributions)
sample.size <- 500 # Specify sample details
alpha <- 2
beta <- 5
beta.sample <- rbeta(n = sample.size,  # sample size
shape1 = alpha,   # alpha parameter
shape2 = beta)    # beta parameter
view(beta.sample)
View(value.dat)
View(figure1.data)
sample.size <- 500
beta.sample <- rbeta(n = sample.size,  # sample size
shape1 = 2,   # alpha parameter
shape2 = 5)    # beta parameter
set.seed(7272) # Set seed so we all get the same results.
sample.size <- 500 # Specify sample details
alpha <- 2
beta <- 5
beta.sample <- rbeta(n = sample.size,  # sample size
shape1 = alpha,   # alpha parameter
shape2 = beta)    # beta parameter
ggplot(sample.df, aes(x= beta.sample))+
geom_histogram(bins = 12)
sample.df <- as.data.frame(beta.sample)
ggplot(sample.df, aes(x= beta.sample))+
geom_histogram(bins = 12)
ggplot(sample.df, aes(x= beta.sample))+
geom_histogram(bins = 15)
ggplot(sample.df, aes(x= beta.sample))+
geom_histogram(bins = 20)
View(sample.df)
ggplot(sample.df, aes(x= beta.sample))+
geom_histogram(bins = 23)
ggplot(sample.df, aes(x= sample.df))+
geom_histogram(bins = 23)
ggplot(sample.df, aes(x= beta.sample))+
geom_histogram(bins = 23)
ggplot(sample.df, aes(x= beta.sample))+
geom_histogram(bins = 27)
ggplot(sample.df, aes(x= beta.sample))+
geom_histogram(bins = 30)
ggplot(sample.df, aes(x= beta.sample))+
geom_histogram(bins = 15)
ggplot(sample.df, aes(x= beta.sample))+
geom_histogram(aes(y = after_stat(density(sample.df))))
ggplot(sample.df, aes(x= beta.sample))+
geom_histogram(aes(y = after_stat(density)))
ggplot()+
geom_line(data= q1.fig.dat, aes(x=x, y=beta.pdf, color="Beta(2,5)")) +
geom_density(data =sample.df, aes(x= beta.sample, color = "Estimate"))+
geom_histogram(aes(y = after_stat(density)))+
geom_hline(yintercept=0)+
theme_bw()+
scale_color_manual("Colors", values = c("black", "purple"), )+
labs(
title = "Comparison between estimated density from
random data vs beta(2,5) distribution",
y = "Density",
x = "x"
)
ggplot()+
geom_line(data= q1.fig.dat, aes(x=x, y=beta.pdf, color="Beta(2,5)")) +
geom_density(data =sample.df, aes(x= beta.sample, color = "Estimate"))+
geom_histogram(sample.df, aes(x = beta.sample, y = after_stat(density)))+
geom_hline(yintercept=0)+
theme_bw()+
scale_color_manual("Colors", values = c("black", "purple"), )+
labs(
title = "Comparison between estimated density from
random data vs beta(2,5) distribution",
y = "Density",
x = "x"
)
ggplot()+
geom_line(data= q1.fig.dat, aes(x=x, y=beta.pdf, color="Beta(2,5)")) +
geom_density(data =sample.df, aes(x= beta.sample, color = "Estimate"))+
geom_histogram(sample.df, aes(y = after_stat(density)))+
geom_hline(yintercept=0)+
theme_bw()+
scale_color_manual("Colors", values = c("black", "purple"), )+
labs(
title = "Comparison between estimated density from
random data vs beta(2,5) distribution",
y = "Density",
x = "x"
)
ggplot(sample.df, aes(x= beta.sample))+
geom_histogram(aes(y = after_stat(density(sample.df))))
ggplot(sample.df, aes(x= beta.sample))+
geom_histogram(aes(y = after_stat(density)))
sample.df <- as.data.frame(beta.sample)
ggplot(sample.df, aes(x= beta.sample))+
geom_histogram(aes(y = after_stat(density)))
sample.df <- as.data.frame(beta.sample)
ggplot(sample.df, aes(x= beta.sample))+
geom_histogram(aes(y = after_stat(density)))
beta.sample <- rbeta(n = sample.size,  # sample size
shape1 = 5,   # alpha parameter
shape2 = 5)    # beta parameter
sample.df <- as.data.frame(beta.sample)
ggplot(sample.df, aes(x= beta.sample))+
geom_histogram(aes(y = after_stat(density)))
beta.sample <- rbeta(n = sample.size,  # sample size
shape1 = 0.5,   # alpha parameter
shape2 = 0.5)    # beta parameter
sample.df <- as.data.frame(beta.sample)
ggplot(sample.df, aes(x= beta.sample))+
geom_histogram(aes(y = after_stat(density)))
beta.sample1 <- rbeta(n = sample.size,  # sample size
shape1 = 2,   # alpha parameter
shape2 = 5)    # beta parameter
sample.df1 <- as.data.frame(beta.sample1)
betaplot1 <- ggplot(sample.df1, aes(x= beta.sample1))+
geom_histogram(aes(y = after_stat(density)))
beta.sample2 <- rbeta(n = sample.size,  # sample size
shape1 = 5,   # alpha parameter
shape2 = 5)    # beta parameter
sample.df2 <- as.data.frame(beta.sample2)
betaplot2 <- ggplot(sample.df2, aes(x= beta.sample2))+
geom_histogram(aes(y = after_stat(density)))
beta.sample3 <- rbeta(n = sample.size,  # sample size
shape1 = 5,   # alpha parameter
shape2 = 2)    # beta parameter
sample.df3 <- as.data.frame(beta.sample3)
betaplot3 <- ggplot(sample.df3, aes(x= beta.sample3))+
geom_histogram(aes(y = after_stat(density)))
beta.sample4 <- rbeta(n = sample.size,  # sample size
shape1 = 0.5,   # alpha parameter
shape2 = 0.5)    # beta parameter
sample.df4 <- as.data.frame(beta.sample4)
betaplot4 <- ggplot(sample.df4, aes(x= beta.sample4))+
geom_histogram(aes(y = after_stat(density)))
(betaplot1 + betaplot2) + (betaplot3 + betaplot4)
betaplot3
betaplot1 + betaplot2
library(patchwork)
(betaplot1 + betaplot2) + (betaplot3 + betaplot4)
(betaplot1 + betaplot2)
(betaplot3 + betaplot4)
?mean
View(sample.df1)
calculate2 <- function(beta.sample, num1, num2){
summarize(variable = "Beta(%d,%d)",
mean = mean(beta.sample),
variance = var(beta.sample),
skewness = skewness(beta.sample),
excess.kurtosis = kurtosis(beta.sample)
)
}
tabs <- calculate2(beta.sample1, 2,5) + calculate2(beta.sample2, 5,5)
tabs <- calculate2(beta.sample1, 2,5)
View(sample.df)
calculate2 <- function(beta.sample, num1, num2){
tibs <- tibble()|>
summarize(variable = "Beta(%d,%d)",
mean = mean(beta.sample),
variance = var(beta.sample),
skewness = skewness(beta.sample),
excess.kurtosis = kurtosis(beta.sample)
)
}
tabs <- calculate2(beta.sample1, 2,5)
tabs <- calculate2(beta.sample1, 2,5) + calculate2(beta.sample2, 5,5)
tabs <- calculate2(beta.sample1, 2,5) |>
calculate2(beta.sample2, 5,5)
library(e1071)
calculate2 <- function(beta.sample, num1, num2){
tibs <- tibble()|>
summarize(variable = sprintf("Beta(%d,%d)", num1, num2),
mean = mean(beta.sample),
variance = var(beta.sample),
skewness = skewness(beta.sample),
excess.kurtosis = kurtosis(beta.sample)
)
return(tibs)
}
samples <- list(
list(beta.sample1, 2, 5),
list(beta.sample2, 5, 5),
list(beta.sample3, 5, 2),
list(beta.sample4, 0.5, 0.5)
)
results <- map_dfr(samples, ~ calculate2(.x[[1]], .x[[2]], .x[[3]]))
calculate2 <- function(beta.sample, num1, num2){
tibs <- tibble()|>
summarize(variable = sprintf("Sample Beta(%g,%g)", num1, num2),
mean = mean(beta.sample),
variance = var(beta.sample),
skewness = skewness(beta.sample),
excess.kurtosis = kurtosis(beta.sample)
)
return(tibs)
}
samples <- list(
list(beta.sample1, 2, 5),
list(beta.sample2, 5, 5),
list(beta.sample3, 5, 2),
list(beta.sample4, 0.5, 0.5)
)
results <- map_dfr(samples, ~ calculate2(.x[[1]], .x[[2]], .x[[3]]))
View(results)
View(value.dat)
merge(value.dat, results, all.x = T)
merge(value.dat, results, all.y = T)
merge(value.dat, results)
merge(value.dat, results, all.y = T, all.x = T)
install.packages("cumstats")
calculate <- function(alpha, beta){
beta.mean <- alpha/ (alpha +beta)
beta.variance <- (alpha*beta)/ ((alpha +beta)^2 *(alpha+beta+1))
beta.skewness <- (2*(beta-alpha)* (alpha+beta+1)^(1/2)) /
((alpha+beta+2)*(alpha*beta)^(1/2))
beta.kurtosis <-6*((alpha -beta)^2 *(alpha+beta+1) - ((alpha*beta)*(alpha+beta+2)))/
((alpha*beta)*(alpha+beta+2)*(alpha+beta+3))
dat.comparison <- tibble() %>%
summarize(variable = sprintf("Beta(%g,%g)", alpha,beta),
mean = beta.mean,
variance = beta.variance,
skewness = beta.skewness,
excess.kurtosis = beta.kurtosis
)
return(dat.comparison)
}
value.dat2 <- betas %>%
pmap_dfr(~calculate(..1, ..2))
library(cumstats)
View(samples)
?cummean
cummean(beta.sample)
beta.sample
library(tidyverse)
library(pwr)
library(VGAM)
library(VGAM)
rlaplace
?rlaplace
setwd("~/Desktop/2024-25/MATH 240/week-12-coding-assignment-Andrew-dev1")
library(pwr)
t.test()
?t.test
# 1c
R <- 10000
alpha <- 0.05
n<- 30
sample <- rlaplace(n, location= 0, scale =4)
t.test(sample[1:20], 0)
t.test(sample[1:20], mu = 0)
t.test20 <- t.test(sample[1:20], mu = 0)
n =20
(boundary.20 <- qt(1-0.05,df = n-1))
n =30
(boundary.30 <- qt(1-0.05,df = n-1))
# 1c
R <- 10000
alpha <- 0.05
n<- 30
# 1c
R <- 10000
alpha <- 0.05
n<- 30
error.counter <- 0
for(i in 1:R){
sample <- rlaplace(n, location= 0, scale =4)
t.test20 <- t.test(sample[1:20], mu = 0)
t.20 <- t.test20$statistic
t.test.full <- t.test(sample, mu = 0)
t.30 <- t.test.full$statistic
# reject null or not at month 20?
# else check at month 30
if (t.20 > boundary.20) {
error.counter <- error.counter + 1
} else if (t.30 > boundary.30) {
error.counter <- error.counter + 1
}
}
# estimate type 1 error rate
(t1.error.rate <- error.counter / R)
n =15
n =15
real.mean10.2 <- 10/(10+2)
real.mean2.10 <- 2/(10+2)
real.mean10.10 <- 10/(10+10)
means <- c(real.mean10.2, real.mean2.10, real.mean10.10)
t.test(sample.beta1, mu= means[1], alternative="less")
sample.beta1 <- rbeta(n, 10, 2)
sample.beta2 <- rbeta(n, 2, 10)
sample.beta3 <- rbeta(n, 10, 10)
t.test(sample.beta1, mu= means[1], alternative="less")
error.counter10.2[1] <- error.counter10.2[1] + (t.left1$p.value < alpha)
# each beta counter will track the left, right, and two tailed tests
error.counter10.2 <- c(0,0,0)
error.counter10.2[1] <- error.counter10.2[1] + (t.left1$p.value < alpha)
t.left1 <- t.test(sample.beta1, mu= means[1], alternative="less")
t.right1 <- t.test(sample.beta1, mu= means[1], alternative="greater")
t.both1 <- t.test(sample.beta1, mu= means[1], alternative="two-sided")
t.left1 <- t.test(sample.beta1, mu= means[1], alternative="less")
t.right1 <- t.test(sample.beta1, mu= means[1], alternative="greater")
t.both1 <- t.test(sample.beta1, mu= means[1], alternative="two.sided")
error.counter10.2[1] <- error.counter10.2[1] + (t.left1$p.value < alpha)
error.counter10.2[2] <- error.counter10.2[2] + (t.right1$p.value < alpha)
error.counter10.2[3] <- error.counter10.2[3] + (t.both1$p.value < alpha)
View(t.left1)
View(t.test.full)
View(t.right1)
for(i in 1:R){
sample.beta1 <- rbeta(n, 10, 2)
sample.beta2 <- rbeta(n, 2, 10)
sample.beta3 <- rbeta(n, 10, 10)
## Beta(10,2) tests
t.left1 <- t.test(sample.beta1, mu= means[1], alternative="less")
t.right1 <- t.test(sample.beta1, mu= means[1], alternative="greater")
t.both1 <- t.test(sample.beta1, mu= means[1], alternative="two.sided")
error.counter10.2[1] <- error.counter10.2[1] + (t.left1$p.value < alpha)
error.counter10.2[2] <- error.counter10.2[2] + (t.right1$p.value < alpha)
error.counter10.2[3] <- error.counter10.2[3] + (t.both1$p.value < alpha)
## Beta(2,10) tests
t.left2 <- t.test(sample.beta2, mu= means[2], alternative="less")
t.right2 <- t.test(sample.beta2, mu= means[2], alternative="greater")
t.both2 <- t.test(sample.beta2, mu= means[2], alternative="two.sided")
error.counter2.10[1] <- error.counter2.10[1] + (t.left2$p.value < alpha)
error.counter2.10[2] <- error.counter2.10[2] + (t.right2$p.value < alpha)
error.counter2.10[3] <- error.counter2.10[3] + (t.both2$p.value < alpha)
## Beta(10,10) tests
t.left3 <- t.test(sample.beta3, mu= means[3], alternative="less")
t.right3 <- t.test(sample.beta3, mu= means[3], alternative="greater")
t.both3 <- t.test(sample.beta3, mu= means[3], alternative="two.sided")
error.counter10.10[1] <- error.counter10.10[1] + (t.left3$p.value < alpha)
error.counter10.10[2] <- error.counter10.10[2] + (t.right3$p.value < alpha)
error.counter10.10[3] <- error.counter10.10[3] + (t.both3$p.value < alpha)
}
R <- 10000 # trials
alpha <- 0.05 # significance level
n =15 # sample size
real.mean10.2 <- 10/(10+2)
real.mean2.10 <- 2/(10+2)
real.mean10.10 <- 10/(10+10)
means <- c(real.mean10.2, real.mean2.10, real.mean10.10)
# each beta counter will track the left, right, and two tailed tests
error.counter10.2 <- c(0,0,0)
error.counter2.10 <- c(0,0,0)
error.counter10.10 <- c(0,0,0)
for(i in 1:R){
sample.beta1 <- rbeta(n, 10, 2)
sample.beta2 <- rbeta(n, 2, 10)
sample.beta3 <- rbeta(n, 10, 10)
## Beta(10,2) tests
t.left1 <- t.test(sample.beta1, mu= means[1], alternative="less")
t.right1 <- t.test(sample.beta1, mu= means[1], alternative="greater")
t.both1 <- t.test(sample.beta1, mu= means[1], alternative="two.sided")
error.counter10.2[1] <- error.counter10.2[1] + (t.left1$p.value < alpha)
error.counter10.2[2] <- error.counter10.2[2] + (t.right1$p.value < alpha)
error.counter10.2[3] <- error.counter10.2[3] + (t.both1$p.value < alpha)
## Beta(2,10) tests
t.left2 <- t.test(sample.beta2, mu= means[2], alternative="less")
t.right2 <- t.test(sample.beta2, mu= means[2], alternative="greater")
t.both2 <- t.test(sample.beta2, mu= means[2], alternative="two.sided")
error.counter2.10[1] <- error.counter2.10[1] + (t.left2$p.value < alpha)
error.counter2.10[2] <- error.counter2.10[2] + (t.right2$p.value < alpha)
error.counter2.10[3] <- error.counter2.10[3] + (t.both2$p.value < alpha)
## Beta(10,10) tests
t.left3 <- t.test(sample.beta3, mu= means[3], alternative="less")
t.right3 <- t.test(sample.beta3, mu= means[3], alternative="greater")
t.both3 <- t.test(sample.beta3, mu= means[3], alternative="two.sided")
error.counter10.10[1] <- error.counter10.10[1] + (t.left3$p.value < alpha)
error.counter10.10[2] <- error.counter10.10[2] + (t.right3$p.value < alpha)
error.counter10.10[3] <- error.counter10.10[3] + (t.both3$p.value < alpha)
}
# Compute Type I error rates
type1_error_rate_10_2 <- error.counter10.2 / R
type1_error_rate_2_10 <- error.counter2.10 / R
type1_error_rate_10_10 <- error.counter10.10 / R
(type1_error_rate_2_10 <- error.counter2.10 / R)
# Compute Type I error rates
(type1_error_rate_10_2 <- error.counter10.2 / R)
(type1_error_rate_2_10 <- error.counter2.10 / R)
(type1_error_rate_10_10 <- error.counter10.10 / R)
